# Generated by Django 5.1.3 on 2024-12-25 21:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Flashcard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(db_column='term', max_length=255)),
                ('definition', models.CharField(db_column='definition', max_length=255)),
            ],
            options={
                'db_table': 'Flashcard',
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.FloatField(db_column='result')),
                ('correct_answer', models.IntegerField(db_column='correct_answer')),
                ('incorrect_answer', models.IntegerField(db_column='incorrect_answer')),
                ('quiz_type', models.BooleanField(db_column='quiz_type')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(db_column='phone_number', max_length=255)),
                ('mindfulness', models.IntegerField(db_column='mindfulness', default=0, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classroom_name', models.CharField(db_column='classroom_name', max_length=255)),
                ('creator_id', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='classroom_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.BooleanField(db_column='user_role', default=False)),
                ('classroom_id', models.ForeignKey(db_column='classroom_id', on_delete=django.db.models.deletion.CASCADE, to='quizhoot.classroom')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder_name', models.CharField(db_column='folder_name', max_length=255)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Folder',
            },
        ),
        migrations.AddField(
            model_name='classroom',
            name='folders',
            field=models.ManyToManyField(blank=True, related_name='classrooms', to='quizhoot.folder'),
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_name', models.CharField(db_column='set_name', max_length=255)),
                ('description', models.TextField(blank=True, db_column='description', null=True)),
                ('share', models.BooleanField(db_column='share', default=False)),
                ('tags', models.CharField(blank=True, db_column='tags', max_length=255, null=True)),
                ('language', models.CharField(blank=True, db_column='language', max_length=50, null=True)),
                ('rating', models.FloatField(blank=True, db_column='rating', null=True)),
                ('size', models.IntegerField(blank=True, db_column='size', default=0, null=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Set',
            },
        ),
        migrations.CreateModel(
            name='Quiz_User_Set',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quiz_id', models.ForeignKey(db_column='quiz_id', on_delete=django.db.models.deletion.CASCADE, to='quizhoot.quiz')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('set_id', models.ForeignKey(db_column='set_id', on_delete=django.db.models.deletion.CASCADE, to='quizhoot.set')),
            ],
        ),
        migrations.AddField(
            model_name='folder',
            name='sets',
            field=models.ManyToManyField(blank=True, related_name='folders', to='quizhoot.set'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='sets',
            field=models.ManyToManyField(blank=True, related_name='classrooms', to='quizhoot.set'),
        ),
        migrations.CreateModel(
            name='Set_Flashcard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fav', models.BooleanField(db_column='fav_word', default=False)),
                ('flashcard_id', models.ForeignKey(db_column='flashcard_id', on_delete=django.db.models.deletion.CASCADE, to='quizhoot.flashcard')),
                ('set_id', models.ForeignKey(db_column='set_id', on_delete=django.db.models.deletion.CASCADE, to='quizhoot.set')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='set',
            name='flashcards',
            field=models.ManyToManyField(related_name='sets', through='quizhoot.Set_Flashcard', to='quizhoot.flashcard'),
        ),
    ]
